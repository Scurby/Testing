#!/bin/bash
#
# start - Initial setup of development environment
#
# Author: Lord Kator <lordkator@swgemu.com>
#
# Created: Sun Apr 21 16:40:55 UTC 2013
#
# Edited Mon Mar 4 2015 by Scurby <scurby@swgemu.com>
#
# Copy of 'getstarted' Edited for stand alone environments and various vm builds.
#
# TODO $USER

logger -t start "** START **"

##############################################################################
# Common functions and setup
##############################################################################
yorn() {
  echo -n -e "$@ Y\b"
  read yorn
  case $yorn in
    [Nn]* ) return 1;;
  esac
  return 0
}

nory() {
  echo -n -e "$@ N\b"
  read yorn
  case $yorn in
    [Yy]* ) return 0;;
  esac
  return 1
}

logmsg() {
  echo "${tc_smso}**${tc_rmso} $*"
  logger -t start "$*"
}

logstep() {
  let "step=$step + 1"
  echo ${tc_smso}$(head -c $(tput cols) < /dev/zero | tr '\0' '*')${tc_rmso}
  echo "${tc_smso}**${tc_rmso} STEP $step >> $*"
  logger -t start "STEP $step >> $*"
}

step=0
tc_smso=$(tput smso)
tc_rmso=$(tput rmso)

gerrit_host='review.swgemu.com'
gerrit_webport='8080'

if [ -n "$1" ]; then
  MODE=$1
else
  MODE=continue
fi

export HAVEX11=false

if xset q > /dev/null 2>&1; then
  HAVEX11=true
fi

# TODO Add check for default browser
# Edit browser as desired. 
export BROWSER=chromium

if [ -x /usr/bin/chromium ]; then
  BROWSER=/usr/bin/chromium
fi

#export BROWSER=firefox

#if [ -x /usr/bin/firefox ]; then
#  BROWSER=/usr/bin/firefox
#fi



##############################################################################
# Handle mode - Cleans virtual machine for publish or fresh install 
# FIXME USE WITH CAUTION - WORK CAN BE LOST
##############################################################################
# fresh and clean remove various swgemu user files and drop db
# TODO add confirmation and validity check

if [ "X$MODE" = "Xfresh" -o "X$MODE" = "Xclean" ]; then
  logmsg "Starting $MODE" ;
  export HISTSIZE=0
  rm -fr ~/new_run
  mkdir ~/new_run
  mv ~/run/00README ~/run/run_gdb ~/new_run
  mkdir ~/new_run/conf
  rm -fr ~/.visual ~/run ~/tmp ~/.viminfo ~/.mysql_history ~/.xsession*
  rm -fr ~/.gitconfig ~/.bash_history ~/.lesshst ~/.ssh/* ~/.subversion
  rm -fr ~/workspace ~/.gerrit* ~/.eclipse ~/eclipse ~/.mozilla
  mv ~/new_run ~/run
  mkdir ~/tmp
  mysql -e 'drop database swgemu' > /dev/null 2>&1 ;
  # Everything gone? Your virtual machine is ready to share.
  # Done if all we needed to do was clean
  if [ "X$MODE" = "Xclean" ]; then
    logmsg "Done $MODE" ;
    exit 0
  fi
fi

##############################################################################
# Choose editor
##############################################################################
logstep "Editor"
export VISUAL=$(cat ~/.visual 2> /dev/null)

while [ ! -n "$VISUAL" ]
do
  read -p "Would you prefer vim, nano, or gedit to edit files from the command line? vim" ed
  case $ed in
   [Nn]* ) echo 'nano' > ~/.visual ;;
   [Gg][Vv][Ii][Mm] ) echo 'gvim' > ~/.visual ;;
   [Gg][Ee][Dd][Ii][Tt] ) echo 'gedit' > ~/.visual ;;
   * ) echo 'vim' > ~/.visual ;;
  esac

  export VISUAL=$(cat ~/.visual 2> /dev/null)
done

logmsg "Editor set to: $VISUAL"

##############################################################################
# Setup git user.* config
##############################################################################
logstep "Git config"
email_address=$(git config --get user.email)

if [ ! -n "$email_address" ]; then
  rm -f ~/.gitconfig
fi

# Start with basic stuff, git setup:
if [ ! -f ~/.gitconfig ]; then
  logmsg "We need to setup your git info for your commits."
  logmsg "These will show up when you commit to Gerrit so you want them to be useful to the real world."
  
  while [ ! -f ~/.gitconfig ]
  do
    new_username=''
    new_email=''

    while [ ! -n "$new_username" ]
    do
      read -p "Display Name for git (i.e. Elmer Fudd): " new_username
    done
    while [ ! -n "$new_email" ]
    do
      read -p "Email for git (i.e. elmerfudd@example.com): " email
      # Validate the email
      oIFS=$IFS
      IFS='@'
      set -- $email
      IFS=$oIFS
      if [ "${#@}" -ne 2 ]; then
	echo "** Invalid email **"
      else
	if host -t MX "$2" > /dev/null 2>&1; then
	  new_email=$email
	  break
	else
	  echo "** Invalid domain for email address **"
	fi
      fi
    done

    if yorn "Set your git user info to: name=[$new_username] email=[$new_email]?"; then
      git config --global user.name "$new_username"
      git config --global user.email "$new_email"
    else
      logmsg "let's try again **"
    fi
  done
fi

git config --list | while read f
do
  logmsg "git $f"
done

email_address=$(git config --get user.email)

##############################################################################
# Setup ssh key
##############################################################################
logstep "SSH Key"
if [ ! -d ~/.ssh -o ! -f ~/.ssh/id_rsa ]; then
  logmsg "Ok looks like you need ssh keys, let's make some for you!"
  mkdir -p ~/.ssh > /dev/null 2>&1
  ssh-keygen -t rsa -q -N "" -C "emudev-"$(date +%Y%m%d)"-${email_address}" -f ~/.ssh/id_rsa
  logmsg "Your new key is in ~/.ssh/id_rsa and the public key is in ~/.ssh/id_rsa.pub"
  if [ -n "$SSH_AGENT_PID" ]; then
    ssh-add
  fi
else
  logmsg "Your public ssh key is in ~/.ssh/id_rsa.pub"
fi

##############################################################################
# Ask them to register on gerrit
##############################################################################
logstep "Gerrit registration"
gerrit_username=$(cat ~/.gerrit_username 2> /dev/null)

# TODO Graphical we could pop-up the web browser !!

if [ ! -n "$gerrit_username" ]; then
  echo
  echo "Login to http://${gerrit_host}:${gerrit_webport}/ and register an account using an openID provider"
  echo
  echo "Go to your Gerrit account and hit Settings -> SSH Public Keys -> [Add Key...]"

  if [ -n "$gerrit_username" ]; then
    nohup $BROWSER "http://${gerrit_host}:${gerrit_webport}/#/register" > ~/tmp/browser.out 2>&1 &
    sleep 2
  fi

  echo
  echo "Then cut-paste the following into the Add SSH Public Key box:"
  echo
  cat ~/.ssh/id_rsa.pub
  echo

  if $HAVEX11 && xclip -selection clipboard < ~/.ssh/id_rsa.pub; then
    logmsg "I've also sent this to your clipboard via xclip to make it easier if you're on a graphical console to just paste it directly."
  fi

  while ! nory "Have you done this yet?"
  do
    echo "You need to do it before you can continue."
    sleep 1
  done

  while [ ! -n "$gerrit_username" ]
  do
    read -p "What username did you choose in Gerrit? " new_gerrit_username

    if [ ! -n "$new_gerrit_username" ]; then
      echo "Please make sure to input the proper username you used in Gerrit."
    else
      echo $new_gerrit_username > ~/.gerrit_username
      gerrit_username=$(cat ~/.gerrit_username 2> /dev/null)
    fi
  done
fi

##############################################################################
# Test Gerrit setup
##############################################################################
logstep "Verify Gerrit User/SSH Key"
logmsg "Gerrit Username: [$gerrit_username]"

# Make ssh'ing to gerrit a bit easier
cat << ! > ~/.ssh/config
StrictHostKeyChecking no

Host $gerrit_host gerrit.swgemu.com
	User $gerrit_username
	Port 29418
	IdentityFile ~/.ssh/id_rsa
!

if scp -q ${gerrit_host}:hooks/commit-msg /tmp/gerrit_check$$; then
  logmsg "Looks like gerrit is happy with your userid and your SSH key"
  rm -f /tmp/gerrit_check$$
else
  logmsg "Something is wrong, please make sure you've got your Public SSH setup properly in Gerrit"
  echo
  echo "Check your internet, your settings, verify everything and try again"
  echo
  echo "To start from the very begining you can run:"
  echo
  echo "start fresh"
  echo
  if [ -n "$GETSTARTED_AUTO" ]; then
    read -p "Press <ENTER> to close window: " junk
  fi
  exit
fi

##############################################################################
# Clone repos and checkout a local branch of Core3 origin/unstable
# TODO Edit working directory name as needed.
##############################################################################
logstep "Git repos"
mkdir -p ~/workspace > /dev/null 2>&1

cd ~/workspace
for i in Core3 PublicEngine Tools
do
  if [ -d $i/.git ]; then
    logmsg "Repo $i is cloned in ~/workspace/$i"
  else
    logmsg "Cloning $i to ~/workspace/$i"
    echo git clone ssh://${gerrit_host}/${i}.git
    git clone ssh://${gerrit_host}/${i}.git
    echo "Install commit-msg hook"
    scp ${gerrit_host}:hooks/commit-msg ${i}/.git/hooks

    if [ "X$i" = "XCore3" ]; then
      # For Core3 they'll need a local branch to play with
      (cd $i
        git checkout -b unstable origin/unstable
	# Edit default push reference
        sed -e '/push = /d' -e '/url/s!$!\n\tpush = HEAD:refs/for/unstable!' .git/config > .git/new_config
	mv .git/new_config .git/config
      )
    fi
  fi
done

##############################################################################
# Make easy links so it's more compatible with the old setup
##############################################################################
logstep "Symlinks"

cd ~/workspace
rm -f MMOCoreORB MMOEngine Core3/MMOEngine
(cd $PWD/Core3;ln -s ../PublicEngine/MMOEngine .)
ln -s PublicEngine/MMOEngine .
ln -s Core3/MMOCoreORB .
ls -l MMOCoreORB MMOEngine Core3/MMOEngine | while read f
do
  logmsg $f
     sudo cp /home/swgemu/workspace/MMOEngine/bin/idlc /usr/local/bin
     sudo chmod 755 /usr/local/bin/idlc
done

##############################################################################
# Figure out what Engine library to link to
##############################################################################
logstep "Engine Library"
englib=PublicEngine/MMOEngine/lib/unix/libengine3.a
if [ ! -L $englib ]; then
  echo "Setup unix library link"
  mkdir -p PublicEngine/MMOEngine/lib/unix > /dev/null 2>&1
  (
  cd PublicEngine/MMOEngine/lib/unix
  if [ $(uname -s) = "Darwin" ]; then
    ln -s ../lion64/libengine3.a
  else
    case $(uname -m) in
      x86_64 ) ln -s ../linux64/libengine3.a ;;
      i386 ) ln -s ../linux32/libengine3.a ;;
    esac
  fi
  )
fi

logmsg "Using engine library: $(readlink $englib)"


##############################################################################
logstep "MySQL database"
##############################################################################

if  [[ ! "$(/usr/sbin/service mysql status)" =~ "start/running" ]]
then 
    sudo service mysql start
fi

if mysql -p123456 -NB -e 'show databases'|grep swgemu > /dev/null 2>&1; then
  logmsg "swgemu database already exists"
  :
else
  logmsg "Enter root password"
  createdb swgemu swgemu 123456      # See createdb script in /home/bin
  logmsg "Restore blank swgemu database to mysql"
  mysql -p123456 -e source -e ~/workspace/Core3/MMOCoreORB/sql/swgemu.sql;
  createdb mantis swgemu 123456      # See createdb script in /home/bin
  logmsg "Restore blank mantis database to mysql"
  mysql -p123456 -e source -e ~/workspace/Core3/MMOCoreORB/sql/mantis.sql;
  for sql in ~/workspace/Core3/MMOCoreORB/sql/updates/*.sql
  do
    logmsg "Runing mysql update: $sql"
    mysql -p123456 swgemu -e source -e $sql
  done
fi

##############################################################################
# Ask them to configure their server options
# TODO Edit tre path as needed
##############################################################################
logstep "Server configuration"
rundir=~/run
runcfg=${rundir}/conf/config.lua
runsrc=~/workspace/MMOCoreORB/bin/conf/config.lua
if [ -f $runcfg ]; then
  logmsg "$runcfg already setup"
else
  sed -e '/TrePath/s!"[^"]*"!"/home/swgemu/workspace/tre"!' $runsrc > $runcfg
  logmsg "By default only tatooine and tutorial zones are enabled"
  if yorn "Would you like to edit the default configuration?"; then
    while :
    do
      $VISUAL -w -s $runcfg
      logmsg "Checking config syntax..."
      if zones=$(cd $rundir;echo 'for k,v in pairs(ZonesEnabled) do io.write(v .. " ") end' | lua -l conf/config); then
	logmsg "SUCCESS - $runcfg passed lua parser"
	logmsg "Zones enabled: $zones"
	break
      else
	logmsg "You have a syntax error, please fix it before continuing."
	echo -n "Press <ENTER> to edit the config again: "
	read junk
      fi
    done
  fi
fi

##############################################################################
# Check for *.tre files
##############################################################################
logstep "TRE files"
trepath=$(cd $rundir;echo 'print(TrePath)' | lua -l conf/config)

mkdir -p $trepath > /dev/null 2>&1

if [ -f "${trepath}/patch_sku1_14_00.tre" ]; then
  logmsg "Looks like your tre files are properly loaded in ${trepath}"
else
  ip=`/sbin/ifconfig eth0 | sed -n '/inet addr:/s/.*addr:\([^ ]*\)  .*/\1/p'`
  echo "NOTE: You must make sure to copy all 53 of the *.tre files from your game disk to: $trepath"
  echo
  echo "EXAMPLE (on OSX box):"
  echo
  echo "  cd /Volumes/BOOTCAMP/SWGEmu"
  echo "  scp *.tre swgemu@${ip}:${trepath}"
  echo
  echo "Windows host options"
  echo
  echo "  On Windows host copy and paste will normally work."
  echo "  Dropbox or other file storage."
  # TODO - Windows examples!?

  while ! yorn "Did you do this yet?"
  do
    echo "You need to do it before you can run the server."
    sleep 1
  done

  if [ ! -f "${trepath}/patch_sku1_14_00.tre" ]; then
    echo "ERROR: It appears you still do not have the *.tre files in ${trepath}"
  fi
fi

##############################################################################
# Give next steps
# TODO ADD MORE INFO
##############################################################################
logstep "Go for it"
logmsg
logmsg "Now you should be able to build the server with:"
logmsg
logmsg "build config"
logmsg
if [ -f "${trepath}/patch_sku1_14_00.tre" ]; then
  logmsg "And if that works you can run the server with:"
  logmsg
  logmsg "run_dev"
  logmsg
else
  # Without the tre file's they can't finish a full build boot, warn them!
  logmsg "NOTICE: Until you copy your *.tre files to ${trepath} you will not be able to run the server"
fi

logmsg "Have fun!"


logger -t start "** COMPLETED IN $SECONDS SECOND(S) **"

if yorn "Would you like to build and run the server now?"; then
  logger -t start "run_dev"
  ~/bin/run_dev
  exit 0
fi


exit 0
